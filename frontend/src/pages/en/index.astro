---
import Layout from "../../layouts/Layout.astro";
import FileUploadForm from "../../components/FileUploadForm.astro";
import Results from "../../components/Results.astro";
import UseExplication from "../../components/UseExplication.astro";
---

<Layout title="Link Inspector">
  <main
    class="bg-slate-200 dark:bg-slate-800 flex min-h-screen justify-center items-center p-10"
  >
    <div
      class="flex flex-col items-center justify-center gap-16 w-full max-w-[1200px]"
    >
      <FileUploadForm />
      <Results />
      <UseExplication />
    </div>
  </main>
</Layout>
<script>
  /*
        SELECTORS
        ==========
    */

  const $fileForm: HTMLInputElement = document.querySelector("#file-form")!;
  const $fileFormDropzone = document.querySelector(
    "#file-form-dropzone",
  ) as HTMLElement;
  const $fileFormShowName = document.querySelector(
    "#file-form-show-name",
  ) as HTMLElement;
  const $fileFormFile: HTMLInputElement =
    document.querySelector("#file-form-file")!;
  const $fileFormReset: HTMLButtonElement =
    document.querySelector("#file-form-reset")!;

  const $loader: HTMLElement = document.querySelector("#loader")!;

  const $resultsError: HTMLElement = document.querySelector("#results-error")!;
  const $resultsErrorMessage: HTMLElement = document.querySelector(
    "#results-error-message",
  )!;
  const $resultsSuccess: HTMLElement =
    document.querySelector("#results-success")!;
  const $resultsList: HTMLElement = document.querySelector("#results-list")!;
  const $resultsNumber: HTMLElement =
    document.querySelector("#results-number")!;

  const $orderSelect: HTMLSelectElement =
    document.querySelector("#order-select")!;
  const $exportSelect: HTMLSelectElement =
    document.querySelector("#export-select")!;

  /* 
        EVENT HANDLERS
        ==============
    */
  $fileForm.addEventListener("submit", upload);
  $fileFormReset.addEventListener("click", () => {
    reset(true);
  });
  $orderSelect.addEventListener("change", orderLinks);
  $exportSelect.addEventListener("change", exportLinks);
  document.addEventListener("DOMContentLoaded", () => {
    reset(true);
  });

  // DRAG AND DROP
  ["dragenter", "dragover", "dragleave", "drop"].forEach((eventName) => {
    $fileFormDropzone.addEventListener(eventName, (e) => {
      e.preventDefault();
      e.stopPropagation();
    });
  });

  ["dragenter", "dragover"].forEach((eventName) => {
    $fileFormDropzone.addEventListener(eventName, () => {
      $fileFormDropzone.classList.add("border-blue-500");
    });
  });

  ["dragleave", "drop"].forEach((eventName) => {
    $fileFormDropzone.addEventListener(eventName, () => {
      $fileFormDropzone.classList.remove("border-blue-500");
    });
  });

  $fileFormDropzone.addEventListener("drop", (e: DragEvent) => {
    if (e.dataTransfer) {
      const files = e.dataTransfer.files;
      if (files.length) {
        $fileFormFile.files = files;
        updateDragDropUI(files[0]);
      } else {
        resetDragDropUI();
      }
    }
  });

  $fileFormDropzone.addEventListener("click", () => {
    $fileFormFile.click();
  });

  $fileFormFile.addEventListener("change", () => {
    if ($fileFormFile.files && $fileFormFile.files.length > 0) {
      updateDragDropUI($fileFormFile.files[0]);
    } else {
      resetDragDropUI();
    }
  });

  /* 
        TYPES
        =====
    */

  export interface Link {
    active: number;
    url: string;
    text: string;
    status?: number;
    error: string;
    relocation?: string;
  }

  /* 
        APP LOGIC
        =========
    */

  var links: Link[]; // Info of the response

  function showLoader() {
    $loader.classList.remove("hidden");
    $loader.classList.add("inline");
  }
  function hideLoader() {
    $loader.classList.remove("inline");
    $loader.classList.add("hidden");
  }
  function disabledButtons() {
    $fileFormFile.disabled = true;
    $fileFormReset.disabled = true;
  }
  function enabledButtons() {
    $fileFormFile.disabled = false;
    $fileFormReset.disabled = false;
  }

  function reset(total: boolean) {
    if (total) {
      resetDragDropUI();
    }
    hideLoader();
    enabledButtons();
    $orderSelect.value = "1";
    $exportSelect.value = "0";
    $resultsError.classList.add("hidden");
    $resultsSuccess.classList.add("hidden");
  }

  async function upload(event: Event) {
    event.preventDefault();
    reset(false);
    showLoader();
    disabledButtons();

    const formData = new FormData();
    formData.append("file", $fileFormFile!.files![0]);
    const f = await fetch("/upload", {
      method: "POST",
      body: formData,
    });

    const r = await f.json();
    if (f.status != 200) {
      $resultsErrorMessage.textContent = r["error"];
      $resultsError.classList.remove("hidden");
      enabledButtons();
      return;
    }
    links = [];
    if (r.links != null) {
      links = r.links;
    }

    printLinks();
    $resultsSuccess.classList.remove("hidden");
    hideLoader();
    enabledButtons();
  }

  function printLinks() {
    $resultsList.innerHTML = "";
    $resultsNumber.innerHTML = "";

    let resultsNumber = 0;
    let resultsListHtml = "";

    for (const l of links) {
      resultsNumber++;

      let warning = "";
      if (l.error != null) {
        warning += `<br>‚ùå ${l.error}`;
      }
      if (l.relocation != null) {
        warning += `<br>üîÅ <a href="${l.relocation}" target="_blank">${l.relocation}</a>`;
      }

      let status = "";
      if (l.status != null) {
        status = l.status.toString();
      }

      let state = "üü¢";
      if (l.active == 2) {
        state = "üü°";
      }
      if (l.active == 3) {
        state = "üî¥";
      }

      const resultTemplate = `
            <li class="pt-3 pb-0 sm:pt-4">
                <div
                    class="flex flex-col space-y-4 sm:space-y-0 sm:flex-row sm:items-center sm:space-x-4 rtl:space-x-reverse">
                    <div class="flex-shrink-0">
                    ${state}
                    </div>
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-gray-900 dark:text-white">
                            ${l.text}
                        </p>
                        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2 mb-2">
                            <a href="${l.url}" target="_blank">${l.url}</a> ${warning}
                        </p>
                    </div>
                    <div
                        class="inline-flex items-center text-base font-semibold text-gray-900 dark:text-white text-center">
                        STATUS<br>${status}
                    </div>
                </div>
            </li>`;
      resultsListHtml += resultTemplate;
    }

    $resultsNumber.textContent = `${resultsNumber}`;
    $resultsList.innerHTML = resultsListHtml;
  }

  function sortLinksAsc(field: string) {
    links.sort((a: any, b: any) => {
      let aValue = a[field];
      let bValue = b[field];

      if (typeof aValue === "string") {
        aValue = aValue.toLowerCase();
      }
      if (typeof bValue === "string") {
        bValue = bValue.toLowerCase();
      }

      if (aValue < bValue) {
        return -1;
      }
      if (aValue > bValue) {
        return 1;
      }
      return 0;
    });
  }

  function orderLinks() {
    if (links.length == 0) {
      alert("Sin resultados para ordenar");
      return;
    }
    const orderType = $orderSelect.value;

    if (orderType == "1") {
      sortLinksAsc("active");
    }
    if (orderType == "2") {
      sortLinksAsc("url");
    }
    if (orderType == "3") {
      sortLinksAsc("status");
    }
    if (orderType == "4") {
      sortLinksAsc("text");
    }
    printLinks();
  }

  declare const XLSX: any;

  function invisibleDownload(blob: Blob, filename: string) {
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", filename);
    link.style.visibility = "hidden";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  function exportToXLSX() {
    const worksheet = XLSX.utils.json_to_sheet(links);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Links");
    XLSX.writeFile(workbook, "link_inspector_links.xlsx");
  }

  function exportToCSV() {
    const worksheet = XLSX.utils.json_to_sheet(links);
    const csv = XLSX.utils.sheet_to_csv(worksheet);
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    invisibleDownload(blob, "link_inspector_links.csv");
  }

  function exportToJSON() {
    const json = JSON.stringify(links, null, 2);
    const blob = new Blob([json], { type: "application/json" });
    invisibleDownload(blob, "link_inspector_links.json");
  }

  function exportLinks() {
    if (links.length == 0) {
      alert("Sin resultados para ordenar");
    }
    const exportType = $exportSelect.value; // XLSX, CSV, JSON

    if (exportType == "1") {
      exportToXLSX();
    }
    if (exportType == "2") {
      exportToCSV();
    }
    if (exportType == "3") {
      exportToJSON();
    }
  }

  function updateDragDropUI(file: File) {
    $fileFormShowName.textContent = `${file.name}`;
    $fileFormShowName.classList.remove("hidden");
    $fileFormDropzone.classList.add("border-green-500", "bg-green-50");
  }

  function resetDragDropUI() {
    $fileFormShowName.textContent = "";
    $fileFormShowName.classList.add("hidden");
    $fileFormDropzone.classList.remove("border-green-500", "bg-green-50");
  }
</script>
