---
import Layout from "../../layouts/Layout.astro";
import FileUploadForm from "../../components/FileUploadForm.astro";
import Results from "../../components/Results.astro";
import UseExplication from "../../components/UseExplication.astro";
---

<Layout title="Link Inspector">
  <main
    class="bg-slate-200 dark:bg-slate-800 flex grow justify-center items-center p-10"
  >
    <div
      class="flex flex-col items-center justify-center gap-16 w-full max-w-prose"
    >
      <FileUploadForm />
      <Results />
      <UseExplication />
    </div>
  </main>
</Layout>
<script>
  /*
        SELECTORS
        ==========
    */

  const $langSelect: HTMLSelectElement =
    document.querySelector("#lang-select")!;

  const $fileForm: HTMLInputElement = document.querySelector("#file-form")!;
  const $fileFormDropzone = document.querySelector(
    "#file-form-dropzone",
  ) as HTMLElement;
  const $fileFormShowName = document.querySelector(
    "#file-form-show-name",
  ) as HTMLElement;
  const $fileFormFile: HTMLInputElement =
    document.querySelector("#file-form-file")!;
  const $fileFormReset: HTMLButtonElement =
    document.querySelector("#file-form-reset")!;

  const $loader: HTMLElement = document.querySelector("#loader")!;

  const $resultsError: HTMLElement = document.querySelector("#results-error")!;
  const $resultsErrorMessage: HTMLElement = document.querySelector(
    "#results-error-message",
  )!;
  const $resultsSuccess: HTMLElement =
    document.querySelector("#results-success")!;
  const $resultsList: HTMLElement = document.querySelector("#results-list")!;
  const $resultsNumber: HTMLElement =
    document.querySelector("#results-number")!;

  const $orderSelect: HTMLSelectElement =
    document.querySelector("#order-select")!;

  const $exportJSONButton: HTMLButtonElement = document.querySelector(
    "#export-json-button",
  )!;
  const $exportCSVButton: HTMLButtonElement =
    document.querySelector("#export-csv-button")!;
  const $exportXLSXButton: HTMLButtonElement = document.querySelector(
    "#export-xlsx-button",
  )!;

  /* 
        EVENT HANDLERS
        ==============
    */
  $langSelect.addEventListener("change", changeLanguage);
  $fileForm.addEventListener("submit", upload);
  $fileFormReset.addEventListener("click", () => {
    reset(true);
  });
  $orderSelect.addEventListener("change", orderLinks);
  $exportJSONButton.addEventListener("click", exportToJSON);
  $exportCSVButton.addEventListener("click", exportToCSV);
  $exportXLSXButton.addEventListener("click", exportToXLSX);

  document.addEventListener("DOMContentLoaded", () => {
    reset(true);
  });

  // DRAG AND DROP

  ["dragenter", "dragover", "dragleave", "drop"].forEach((eventName) => {
    $fileFormDropzone.addEventListener(eventName, (e) => {
      e.preventDefault();
      e.stopPropagation();
      if (eventName === "dragenter" || eventName === "dragover") {
        $fileFormDropzone.classList.add("border-blue-500");
      } else {
        $fileFormDropzone.classList.remove("border-blue-500");
      }
    });
  });

  $fileFormDropzone.addEventListener("drop", (e) => {
    if (e.dataTransfer) {
      const files = e.dataTransfer.files;
      if (files.length) {
        const dataTransfer = new DataTransfer();
        for (const file of files) {
          dataTransfer.items.add(file);
        }
        $fileFormFile.files = dataTransfer.files;
        updateDragDropUI(files[0]);
      } else {
        resetDragDropUI();
      }
    }
  });

  $fileFormFile.addEventListener("change", () => {
    if ($fileFormFile.files && $fileFormFile.files.length > 0) {
      updateDragDropUI($fileFormFile.files[0]);
    } else {
      resetDragDropUI();
    }
  });

  /* 
        TYPES
        =====
    */

  export interface Link {
    active: number;
    url: string;
    text: string;
    status?: number;
    error: string;
    relocation?: string;
  }

  /* 
        APP LOGIC
        =========
    */

  var links: Link[]; // Info of the response

  function showLoader() {
    $loader.classList.remove("hidden");
    $loader.classList.add("inline");
  }
  function hideLoader() {
    $loader.classList.remove("inline");
    $loader.classList.add("hidden");
  }
  function disabledButtons() {
    $fileFormFile.disabled = true;
    $fileFormReset.disabled = true;
  }
  function enabledButtons() {
    $fileFormFile.disabled = false;
    $fileFormReset.disabled = false;
  }

  function reset(total: boolean) {
    if (total) {
      resetDragDropUI();
    }
    hideLoader();
    enabledButtons();
    $orderSelect.value = "1";
    $resultsError.classList.add("hidden");
    $resultsSuccess.classList.add("hidden");
  }

  async function upload(event: Event) {
    event.preventDefault();
    reset(false);
    showLoader();
    disabledButtons();

    const formData = new FormData();
    formData.append("file", $fileFormFile!.files![0]);
    const f = await fetch("/upload", {
      method: "POST",
      body: formData,
    });

    const r = await f.json();
    if (f.status != 200) {
      $resultsErrorMessage.textContent = r["error"];
      $resultsError.classList.remove("hidden");
      enabledButtons();
      return;
    }
    links = [];
    if (r.links != null) {
      links = r.links;
    }

    printLinks();
    $resultsSuccess.classList.remove("hidden");
    hideLoader();
    enabledButtons();
  }

  function printLinks() {
    $resultsList.innerHTML = "";
    $resultsNumber.innerHTML = "";

    let resultsNumber = 0;

    const resultsTemplate: HTMLLIElement =
      document.querySelector("#template-result")!;

    for (const l of links) {
      resultsNumber++;

      let active = "üü¢";
      if (l.active == 2) {
        active = "üü°";
      }
      if (l.active == 3) {
        active = "üî¥";
      }
      document.querySelector(".template-result-active")!.textContent = active;

      const resultsTemplateCloned = (resultsTemplate as Node).cloneNode(true);
      const template = resultsTemplateCloned as HTMLLIElement;
      template.removeAttribute("id");

      template.querySelector(".template-result-text")!.textContent = l.text;
      const $resultUrl = template.querySelector(".template-result-url")!;
      ($resultUrl as HTMLAnchorElement).href = l.url;
      $resultUrl.textContent = l.url;

      if (l.relocation != null) {
        const $relocation = template.querySelector(
          ".template-result-relocation",
        )!;
        $relocation.classList.remove("hidden");
        const $relocationUrl: HTMLAnchorElement = template.querySelector(
          ".template-result-relocation-url",
        )!;
        ($relocationUrl as HTMLAnchorElement).href = l.relocation;
        $relocationUrl.textContent = l.relocation;
      }

      if (l.error != null) {
        const $resultsError = template.querySelector(".template-result-error")!;
        $resultsError.innerHTML = `<span class="text-gray-500">‚ùå ${l.error}</span>`;
        $resultsError.classList.remove("hidden");
      }

      let status = "‚ùå";
      if (l.status != null) {
        status = l.status.toString();
      }
      template.querySelector(".template-result-status")!.innerHTML =
        `STATUS<br/>${status}`;
      template.classList.remove("hidden");
      $resultsList.insertAdjacentElement("beforeend", template);
    }

    $resultsNumber.textContent = `${resultsNumber}`;

    enablePasteTooltip();
  }

  function sortLinksAsc(field: string) {
    links.sort((a: any, b: any) => {
      let aValue = a[field];
      let bValue = b[field];

      if (typeof aValue === "string") {
        aValue = aValue.toLowerCase();
      }
      if (typeof bValue === "string") {
        bValue = bValue.toLowerCase();
      }

      if (aValue < bValue) {
        return -1;
      }
      if (aValue > bValue) {
        return 1;
      }
      return 0;
    });
  }

  function orderLinks() {
    if (links.length == 0) {
      alert("Sin resultados para ordenar");
      return;
    }
    const orderType = $orderSelect.value;

    if (orderType == "1") {
      sortLinksAsc("active");
    }
    if (orderType == "2") {
      sortLinksAsc("url");
    }
    if (orderType == "3") {
      sortLinksAsc("status");
    }
    if (orderType == "4") {
      sortLinksAsc("text");
    }
    printLinks();
  }

  declare const XLSX: any;

  function invisibleDownload(blob: Blob, filename: string) {
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", filename);
    link.style.visibility = "hidden";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  function exportToXLSX() {
    const worksheet = XLSX.utils.json_to_sheet(links);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Links");
    XLSX.writeFile(workbook, "link_inspector_links.xlsx");
  }

  function exportToCSV() {
    const worksheet = XLSX.utils.json_to_sheet(links);
    const csv = XLSX.utils.sheet_to_csv(worksheet);
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    invisibleDownload(blob, "link_inspector_links.csv");
  }

  function exportToJSON() {
    const json = JSON.stringify(links, null, 2);
    const blob = new Blob([json], { type: "application/json" });
    invisibleDownload(blob, "link_inspector_links.json");
  }

  function updateDragDropUI(file: File) {
    $fileFormShowName.textContent = `${file.name}`;
    $fileFormShowName.classList.remove("hidden");
    $fileFormDropzone.classList.add("border-green-500", "bg-green-50");
  }

  function resetDragDropUI() {
    $fileFormShowName.textContent = "";
    $fileFormShowName.classList.add("hidden");
    $fileFormDropzone.classList.remove("border-green-500", "bg-green-50");
    $fileFormFile.value = "";
  }

  function changeLanguage() {
    const selectedLanguage = $langSelect.value;
    if (selectedLanguage == "es") {
      window.location.href = "/";
    } else {
      window.location.href = `/${selectedLanguage}`;
    }
  }

  function enablePasteTooltip() {
    const $pasteTooltipGroups = document.querySelectorAll(
      ".paste-tooltip-group",
    );

    for (const $ptg of $pasteTooltipGroups) {
      const $trigger: HTMLSpanElement = $ptg.querySelector(
        ".paste-tooltip-trigger",
      )!;
      $trigger.addEventListener("click", function () {
        console.log(this);
        const $content: HTMLDivElement = $ptg.querySelector(
          ".paste-tooltip-content",
        )!;
        const $closesPgt: HTMLElement = this.closest(".paste-tooltip-group")!;
        const $linkToCopy: HTMLElement =
          $closesPgt.nextElementSibling as HTMLElement;
        const textToCopy = $linkToCopy.textContent!;

        navigator.clipboard.writeText(textToCopy).then(() => {
          $content.classList.remove("opacity-0");
          $content.classList.add("opacity-100");

          setTimeout(() => {
            $content.classList.remove("opacity-100");
            $content.classList.add("opacity-0");
          }, 1000);
        });
      });
    }
  }
</script>
